{{- $ModuleName := firstUpper .Name -}}
package {{.Pkg}}

import (
	"github.com/xfali/xlog"
	"sync"
)

type {{$ModuleName}}ServicImpl struct {
	log  xlog.Logger
	db   map[interface{}]interface{}
	lock sync.Mutex
}

func New{{$ModuleName}}ServicImpl() *{{$ModuleName}}ServicImpl {
	return &{{$ModuleName}}ServicImpl{
		log: xlog.GetLogger(),
		db:  map[interface{}]interface{}{},
	}
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}(request {{$ModuleName}}) ([]{{$ModuleName}}, error) {
    var ret []{{$ModuleName}}
    s.lock.Lock()
    defer s.lock.Unlock()
    for _, v := range s.db {
        ret = append(ret, v.({{$ModuleName}}))
    }
    return ret, nil
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}(request {{$ModuleName}}) (int64, error) {
    s.lock.Lock()
    defer s.lock.Unlock()
    s.db[request.{{selectModuleKey .}}] = request
    return int64(len(s.db)), nil
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}Batch(requests ...{{$ModuleName}}) error {
    s.lock.Lock()
    defer s.lock.Unlock()
    for _, req := range requests {
        s.db[req.{{selectModuleKey .}}] = req
    }
}

func (s *{{$ModuleName}}ServicImpl) Update{{$ModuleName}}(request {{$ModuleName}}) (bool, error) {
    s.lock.Lock()
    defer s.lock.Unlock()
    _, ok := s.db[request.{{selectModuleKey .}}]
    if ok {
        s.db[req.{{selectModuleKey .}}] = request
    }
    return false, nil
}

func (s *{{$ModuleName}}ServicImpl) Delete{{$ModuleName}}(request {{$ModuleName}}) (bool, error) {
   s.lock.Lock()
   defer s.lock.Unlock()
   _, ok := s.db[request.{{selectModuleKey .}}]
   if ok {
       delete(s.db, request.{{selectModuleKey .}})
   }
   return false, nil
}