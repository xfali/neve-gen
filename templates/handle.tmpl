package {{.Pkg}}

import (
    "fmt"
	"github.com/gin-gonic/gin"
	"github.com/xfali/neve-web/gineve/midware/loghttp"
	"github.com/xfali/xlog"
	"net/http"
)

type {{.Name}}Handler struct {
	log  xlog.Logger
	Svc  {{.Name}}Service   `inject:""`
	HLog loghttp.HttpLogger `inject:""`
}

func New{{.Name}}Handler() *{{.Name}}Handler {
	return &{{.Name}}Handler{
		log: xlog.GetLogger(),
	}
}

func (h *{{.Name}}Handler) HttpRoutes(engine gin.IRouter) {
    engine.GET("/{{ firstLower .Name }}s", h.HLog.LogHttp(), h.queryList)
	engine.GET("/{{ firstLower .Name }}s/:id", h.HLog.LogHttp(), h.query)
	engine.POST("/{{ firstLower .Name }}s", h.HLog.LogHttp(), h.insert)
	engine.PUT("/{{ firstLower .Name }}s/:id", h.HLog.LogHttp(), h.update)
	engine.DELETE("/{{ firstLower .Name }}s/:id", h.HLog.LogHttp(), h.delete)
}

// @Summary Query {{.Name}} list
// @Description Query {{.Name}} list
// @Tags {{.Name}}
// @Success 200 {array} {{.Pkg}}.{{.Name}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "resource not exists"
// @Router /{{ firstLower .Name }}s [get]
func (h *{{.Name}}Handler) queryList(ctx *gin.Context) {
	v, err := h.Svc.Query{{.Name}}({{.Pkg}}.{{.Name}}{})
	if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }

	ctx.JSON(200, v)
}

// @Summary Query {{.Name}}
// @Description Query {{.Name}}
// @Tags {{.Name}}
// @Param id path string true "id"
// @Success 200 {object} {{.Pkg}}.{{.Name}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Name }}s/{id} [get]
func (h *{{.Name}}Handler) query(ctx *gin.Context) {
    id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{.Pkg}}.{{.Name}} {
    }
    {{ setPrimaryKeyValue . "req" "id" }}
	v, err := h.Svc.Query{{.Name}}(req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }

    if len(v) == 0 {
        ctx.AbortWithStatus(http.StatusNotFound)
        return
    }

    ctx.JSON(200, v[0])
}

// @Summary Insert {{.Name}}
// @Description Insert {{.Name}}
// @Tags {{.Name}}
// @Param value body {{.Pkg}}.{{.Name}} true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Router /{{ firstLower .Name }}s [post]
func (h *{{.Name}}Handler) insert(ctx *gin.Context) {
    req := {{.Pkg}}.{{.Name}} {
	}
	err := ctx.Bind(&req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
	id, err := h.Svc.Insert{{.Name}}(req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
    ctx.Writer.Write([]byte(fmt.Sprintf("%v", id)))
}

// @Summary Update {{.Name}} by Id
// @Description Update {{.Name}} by Id
// @Tags {{.Name}}
// @Param id path string true "id"
// @Param value body {{.Pkg}}.{{.Name}} true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Name }}s/{id} [put]
func (h *{{.Name}}Handler) update(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{.Pkg}}.{{.Name}} {
	}
	err := ctx.Bind(&req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{ setPrimaryKeyValue . "req" "id" }}
	done, err := h.Svc.Update{{.Name}}(req)
    if !done {
        ctx.AbortWithStatus(http.StatusNotFound)
        return
    }
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
}

// @Summary Delete {{.Name}} by Id
// @Description Delete {{.Name}} by Id
// @Tags {{.Name}}
// @Param id path string true "id"
// @Success 200
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Name }}s/{id} [delete]
func (h *{{.Name}}Handler) delete(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{.Pkg}}.{{.Name}} {
    }
	{{ setPrimaryKeyValue . "req" "id" }}
	ok := h.Svc.Delete{{.Name}}(req)
	if !ok {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}
}