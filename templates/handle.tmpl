package {{.Pkg}}

import (
	"github.com/gin-gonic/gin"
	"github.com/xfali/neve-web/gineve/midware/loghttp"
	"github.com/xfali/xlog"
	"net/http"
)

type {{.Name}}Handler struct {
	log  xlog.Logger
	Svc  {{.Name}}Service   `inject:""`
	HLog loghttp.HttpLogger `inject:""`
}

func New{{.Name}}Handler() *{{.Name}}Handler {
	return &{{.Name}}Handler{
		log: xlog.GetLogger(),
	}
}

func (h *{{.Name}}Handler) HttpRoutes(engine gin.IRouter) {
    engine.GET("/keys", h.HLog.LogHttp(), h.queryList)
	engine.GET("/keys/:key", h.HLog.LogHttp(), h.query)
	engine.POST("/keys", h.HLog.LogHttp(), h.insert)
	engine.PUT("/keys/:key", h.HLog.LogHttp(), h.update)
	engine.DELETE("/keys/:key", h.HLog.LogHttp(), h.delete)
}

// @Summary Query {{.Name}} list
// @Description Query {{.Name}} list
// @Tags {{.Name}}
// @Param key path string true "key"
// @Success 200 {string} string
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "key not exists"
// @Router /keys [get]
func (h *{{.Name}}Handler) queryList(ctx *gin.Context) {
	key := ctx.Param("key")
	if key == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	v := h.Svc.Query{{.Name}}({{.Name}}{ {{ .Name }} })
	if v == "" {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}

	ctx.Writer.WriteString(v)
}

// @Summary Query {{.Name}}
// @Description Query {{.Name}}
// @Tags {{.Name}}
// @Param key path string true "key"
// @Success 200 {string} string
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "key not exists"
// @Router /keys/{key} [get]
func (h *{{.Name}}Handler) query(ctx *gin.Context) {
	key := ctx.Param("key")
	if key == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	v := h.Svc.Get(key)
	if v == "" {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}

	h.log.Infof("Get key: %s , value: %s\n", key, v)
	ctx.Writer.WriteString(v)
}

// @Summary Add Key and Value
// @Description Add Key and Value
// @Tags {{.Name}}
// @Param value body string true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Router /keys/{key} [post]
func (h *{{.Name}}Handler) insert(ctx *gin.Context) {
	key := ctx.Param("key")
	if key == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	v, err := ctx.GetRawData()
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	h.log.Infof("Set key: %s , value: %s\n", key, string(v))
	h.Svc.Set(key, string(v))
}

// @Summary Add Key and Value
// @Description Add Key and Value
// @Tags {{.Name}}
// @Param key path string true "key"
// @Param value body string true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Router /keys/{key} [put]
func (h *{{.Name}}Handler) update(ctx *gin.Context) {
	key := ctx.Param("key")
	if key == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	v, err := ctx.GetRawData()
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	h.log.Infof("Set key: %s , value: %s\n", key, string(v))
	h.Svc.Set(key, string(v))
}

// @Summary Delete Key and Value
// @Description Delete Key and Value
// @Tags {{.Name}}
// @Param key path string true "key"
// @Success 200
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "key not exists"
// @Router /keys/{key} [delete]
func (h *{{.Name}}Handler) delete(ctx *gin.Context) {
	key := ctx.Param("key")
	if key == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	ok := h.Svc.Delete(key)
	if !ok {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}

	h.log.Infof("Delete key: %s\n", key)
}