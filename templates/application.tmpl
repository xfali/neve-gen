{{- $ModeName := .Value.App.ModName -}}
package main

import (
	"github.com/xfali/neve-core"
	"github.com/xfali/neve-core/processor"
	{{- if .Config.Gobatis.Enable }}
	"github.com/xfali/neve-database/gobatiseve"
    {{- end}}
    "github.com/xfali/neve-logger/xlogneve"
    "github.com/xfali/neve-utils/neverror"
    "github.com/xfali/neve-web/gineve"
    "github.com/xfali/xlog"
    {{- if .Config.Swagger.Enable }}
	_ "{{.Value.App.ModName}}/docs/swagdoc"
	{{- end}}
	{{- range .Value.App.Modules }}
	"{{$ModeName}}/internal/pkg/{{.Pkg}}"
	{{- end}}
	{{- if .Config.Swagger.Enable }}
	"{{.Value.App.ModName}}/pkg/swagger"
	{{- end}}
	{{- if hasDB .Config "mysql"}}
	_ "github.com/go-sql-driver/mysql"
    {{- else if hasDB .Config "postgres"}}
     _ "github.com/lib/pq"
	{{- end}}
)

var ConfigFile string

func init() {
	if neve.ResourceRoot == "" {
		neve.SetResourceRoot("assets")
	}
	if ConfigFile == "" {
		ConfigFile = "config.yaml"
	}
}

// {{.Value.Author.Name}}

// @title {{.Value.App.Name}}
// @version {{.Value.App.Version}}
// @description {{.Value.App.Description}}

// @contact.name {{.Value.Author.Name}}
// @contact.email {{.Value.Author.Email}}
func main() {
	confFile := neve.GetResource(ConfigFile)
	xlog.Infoln("Config file: ", confFile)
	app := neve.NewFileConfigApplication(confFile)
	// 配置日志处理器，读取配置并初始化日志系统
	neverror.PanicError(app.RegisterBean(xlogneve.NewLoggerProcessor()))
	// 配置值注入处理器，添加值注入功能。此处配置标识注入的tag为value
	neverror.PanicError(app.RegisterBean(processor.NewValueProcessor()))
	// 配置web服务处理器，添加web服务路由注册功能
	neverror.PanicError(app.RegisterBean(gineve.NewProcessor()))
	{{- if .Config.Gobatis.Enable }}
	// 配置数据库处理器，读取配置生成datasource
	neverror.PanicError(app.RegisterBean(gobatiseve.NewProcessor()))
	{{- end}}

	{{- if .Config.Swagger.Enable }}
	// 配置swagger
	neverror.PanicError(app.RegisterBean(swagger.NewHandler()))
	{{- end}}

	// 自定义的 service
    {{- range .Value.App.Modules }}
    neverror.PanicError(app.RegisterBean({{.Pkg}}.New{{firstUpper .Name}}Service()))
    {{- end}}

	// 自定义的 handler
    {{- range .Value.App.Modules }}
    neverror.PanicError(app.RegisterBean({{.Pkg}}.New{{firstUpper .Name}}Handler()))
    {{- end}}

	app.Run()
}