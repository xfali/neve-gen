{{- $Module := currentModule -}}
{{- $ModuleName :=  firstUpper $Module.Name -}}
package {{$Module.Pkg}}

import (
	"context"
	"github.com/xfali/xlog"
	"{{.Value.App.ModName}}/pkg/apis/{{$Module.Pkg}}"
)

type {{$ModuleName}}ServicImpl struct {
	log  xlog.Logger
}

func New{{$ModuleName}}Service() *{{$ModuleName}}ServicImpl {
	return &{{$ModuleName}}ServicImpl{
		log: xlog.GetLogger(),
	}
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}(ctx context.Context, request {{$Module.Pkg}}.{{$ModuleName}}) (*{{$Module.Pkg}}.{{$ModuleName}}, error) {
	panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}List(ctx context.Context, request {{$Module.Pkg}}.{{$ModuleName}}, offset int, limit int) ([]{{$Module.Pkg}}.{{$ModuleName}}, error) {
	panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}(ctx context.Context, request {{$Module.Pkg}}.{{$ModuleName}}) (int64, error) {
	panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}Batch(ctx context.Context, request ...{{$Module.Pkg}}.{{$ModuleName}}) error {
	panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Update{{$ModuleName}}(ctx context.Context, request {{$Module.Pkg}}.{{$ModuleName}}) (bool, error) {
	panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Delete{{$ModuleName}}(ctx context.Context, request {{$Module.Pkg}}.{{$ModuleName}}) (bool, error) {
	panic("Not Implemented. ")
}