{{- $ModuleName := firstUpper .Value.Name -}}
{{- $PrimaryKeyValueImport := setPrimaryKeyValueImport .Value -}}
package {{.Value.Pkg}}

import (
    "fmt"
	"github.com/gin-gonic/gin"
	"github.com/xfali/neve-web/gineve/midware/loghttp"
	"github.com/xfali/xlog"
	"net/http"
	"strconv"
)

type {{$ModuleName}}Handler struct {
	log  xlog.Logger
	Svc  {{$ModuleName}}Service   `inject:""`
	HLog loghttp.HttpLogger `inject:""`
}

func New{{$ModuleName}}Handler() *{{$ModuleName}}Handler {
	return &{{$ModuleName}}Handler{
		log: xlog.GetLogger(),
	}
}

func (h *{{$ModuleName}}Handler) HttpRoutes(engine gin.IRouter) {
    engine.GET("/{{ firstLower .Value.Name }}s", h.HLog.LogHttp(), h.queryList)
	engine.GET("/{{ firstLower .Value.Name }}s/:id", h.HLog.LogHttp(), h.query)
	engine.POST("/{{ firstLower .Value.Name }}s", h.HLog.LogHttp(), h.insert)
	engine.PUT("/{{ firstLower .Value.Name }}s/:id", h.HLog.LogHttp(), h.update)
	engine.DELETE("/{{ firstLower .Value.Name }}s/:id", h.HLog.LogHttp(), h.delete)
}

// @Summary Query {{.Value.Name}} list
// @Description Query {{.Value.Name}} list
// @Tags {{.Value.Name}}
// @Param offset query string true "offset"
// @Param limit query string true "limit"
// @Success 200 {array} {{.Value.Pkg}}.{{$ModuleName}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "resource not exists"
// @Router /{{ firstLower .Value.Name }}s [get]
func (h *{{$ModuleName}}Handler) queryList(ctx *gin.Context) {
    ostr := ctx.DefaultQuery("offset", "0")
    lstr := ctx.DefaultQuery("limit", "30")
    offset, err := strconv.Atoi(ostr)
    if err != nil {
        offset = 0
    }
    limit, err := strconv.Atoi(lstr)
    if err != nil {
        limit = 0
    }
	v, err := h.Svc.Query{{$ModuleName}}List({{$ModuleName}}{}, offset, limit)
	if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }

	ctx.JSON(200, v)
}

// @Summary Query {{.Value.Name}}
// @Description Query {{.Value.Name}}
// @Tags {{.Value.Name}}
// @Param id path string true "id"
// @Success 200 {object} {{.Value.Pkg}}.{{$ModuleName}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Value.Name }}s/{id} [get]
func (h *{{$ModuleName}}Handler) query(ctx *gin.Context) {
    id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$ModuleName}} {
    }
    {{ setPrimaryKeyValue .Value "req" "id" }}
	v, err := h.Svc.Query{{$ModuleName}}(req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }

    if v == nil {
        ctx.AbortWithStatus(http.StatusNotFound)
        return
    }

    ctx.JSON(200, *v)
}

// @Summary Insert {{.Value.Name}}
// @Description Insert {{.Value.Name}}
// @Tags {{.Value.Name}}
// @Param value body {{.Value.Pkg}}.{{$ModuleName}} true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Router /{{ firstLower .Value.Name }}s [post]
func (h *{{$ModuleName}}Handler) insert(ctx *gin.Context) {
    req := {{$ModuleName}} {
	}
	err := ctx.Bind(&req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
	id, err := h.Svc.Insert{{$ModuleName}}(req)
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
    ctx.Writer.Write([]byte(fmt.Sprintf("%v", id)))
}

// @Summary Update {{.Value.Name}} by Id
// @Description Update {{.Value.Name}} by Id
// @Tags {{.Value.Name}}
// @Param id path string true "id"
// @Param value body {{.Value.Pkg}}.{{$ModuleName}} true "value"
// @Success 200
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Value.Name }}s/{id} [put]
func (h *{{$ModuleName}}Handler) update(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$ModuleName}} {
	}
	err := ctx.Bind(&req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{ setPrimaryKeyValue .Value "req" "id" }}
	done, err := h.Svc.Update{{$ModuleName}}(req)
    if !done {
        ctx.AbortWithStatus(http.StatusNotFound)
        return
    }
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
}

// @Summary Delete {{.Value.Name}} by Id
// @Description Delete {{.Value.Name}} by Id
// @Tags {{.Value.Name}}
// @Param id path string true "id"
// @Success 200
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower .Value.Name }}s/{id} [delete]
func (h *{{$ModuleName}}Handler) delete(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$ModuleName}} {
    }
	{{ setPrimaryKeyValue .Value "req" "id" }}
	ok, err := h.Svc.Delete{{$ModuleName}}(req)
	if !ok {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}
    if err != nil {
        ctx.AbortWithStatus(http.StatusBadRequest)
        return
    }
}