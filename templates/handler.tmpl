{{- $Module := currentModule -}}
{{- $ModuleName :=  firstUpper $Module.Name -}}
{{- $ResultType :=  firstUpper .Value.App.Result.Name | print .Value.App.Result.Pkg "." -}}
{{- $PrimaryInfo := selectModulePrimaryInfo $Module -}}
package {{$Module.Pkg}}

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/xfali/neve-web/gineve/midware/loghttp"
	"github.com/xfali/xlog"
	"net/http"
	"strconv"
	"{{.Value.App.ModName}}/pkg/apis/{{$Module.Pkg}}"
	{{- if resultDefined .}}
	"{{.Value.App.ModName}}/pkg/apis/result"
	{{- end}}
)

type {{$ModuleName}}Handler struct {
	log  xlog.Logger
	Svc  {{$Module.Pkg}}.{{$ModuleName}}Service `inject:""`
	HLog loghttp.HttpLogger `inject:""`
}

func New{{$ModuleName}}Handler() *{{$ModuleName}}Handler {
	return &{{$ModuleName}}Handler{
		log: xlog.GetLogger(),
	}
}

func (h *{{$ModuleName}}Handler) HttpRoutes(engine gin.IRouter) {
	engine.GET("/{{ firstLower $Module.Name }}s", h.HLog.LogHttp(), h.queryList)
	engine.GET("/{{ firstLower $Module.Name }}s/:id", h.HLog.LogHttp(), h.query)
	engine.POST("/{{ firstLower $Module.Name }}s", h.HLog.LogHttp(), h.insert)
	engine.PUT("/{{ firstLower $Module.Name }}s/:id", h.HLog.LogHttp(), h.update)
	engine.DELETE("/{{ firstLower $Module.Name }}s/:id", h.HLog.LogHttp(), h.delete)
}

// @Summary Query {{$Module.Name}} list
// @Description Query {{$Module.Name}} list
// @Tags {{$Module.Name}}
// @Param offset query string true "offset"
// @Param limit query string true "limit"
// @Accept json
// @Produce json
{{- if resultDefined .}}
// @Success 200 {object} {{$ResultType}}{data=[]{{$Module.Pkg}}.{{$ModuleName}}}
{{- else -}}
// @Success 200 {array} {{$Module.Pkg}}.{{$ModuleName}}
{{- end}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "resource not exists"
// @Router /{{ firstLower $Module.Name }}s [get]
func (h *{{$ModuleName}}Handler) queryList(ctx *gin.Context) {
	ostr := ctx.DefaultQuery("offset", "0")
	lstr := ctx.DefaultQuery("limit", "30")
	offset, err := strconv.Atoi(ostr)
	if err != nil {
		offset = 0
	}
	limit, err := strconv.Atoi(lstr)
	if err != nil {
		limit = 0
	}
	v, err := h.Svc.Query{{$ModuleName}}List(context.Background(), {{$Module.Pkg}}.{{$ModuleName}}{}, offset, limit)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}

	{{- if resultDefined .}}
	ctx.JSON(200, result.Ok(v))
	{{- else -}}
	ctx.JSON(200, v)
	{{- end}}
}

// @Summary Query {{$Module.Name}}
// @Description Query {{$Module.Name}}
// @Tags {{$Module.Name}}
// @Param id path string true "id"
// @Accept json
// @Produce json
{{- if resultDefined .}}
// @Success 200 {object} {{$ResultType}}{data={{$Module.Pkg}}.{{$ModuleName}}}
{{- else -}}
// @Success 200 {object} {{$Module.Pkg}}.{{$ModuleName}}
{{- end}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower $Module.Name }}s/{id} [get]
func (h *{{$ModuleName}}Handler) query(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$Module.Pkg}}.{{$ModuleName}} {
	}
	{{ setPrimaryKeyValue $Module "req" "id" }}
	v, err := h.Svc.Query{{$ModuleName}}(context.Background(), req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}

	if v == nil {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}

	{{- if resultDefined .}}
	ctx.JSON(200, result.Ok(*v))
	{{- else -}}
	ctx.JSON(200, *v)
	{{- end}}
}

// @Summary Insert {{$Module.Name}}
// @Description Insert {{$Module.Name}}
// @Tags {{$Module.Name}}
// @Param value body {{$Module.Pkg}}.{{$ModuleName}} true "value"
// @Accept json
// @Produce json
{{- if resultDefined .}}
// @Success 200 {object} {{$ResultType}}{data={{$PrimaryInfo.DataType}}}
{{- else -}}
// @Success 200 {object} {{$PrimaryInfo.DataType}}
{{- end}}
// @Failure 400 {string} string "param error"
// @Router /{{ firstLower $Module.Name }}s [post]
func (h *{{$ModuleName}}Handler) insert(ctx *gin.Context) {
	req := {{$Module.Pkg}}.{{$ModuleName}} {
	}
	err := ctx.Bind(&req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	id, err := h.Svc.Insert{{$ModuleName}}(context.Background(), req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{- if resultDefined .}}
	ctx.JSON(200, result.Ok(id))
	{{- else -}}
	ctx.Writer.Write([]byte(strconv.FormatInt(id, 10)))
	{{- end}}
}

// @Summary Update {{$Module.Name}} by Id
// @Description Update {{$Module.Name}} by Id
// @Tags {{$Module.Name}}
// @Param id path string true "id"
// @Param value body {{$Module.Pkg}}.{{$ModuleName}} true "value"
// @Accept json
// @Produce json
{{- if resultDefined .}}
// @Success 200 {object} {{$ResultType}}
{{- else -}}
// @Success 200
{{- end}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower $Module.Name }}s/{id} [put]
func (h *{{$ModuleName}}Handler) update(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$Module.Pkg}}.{{$ModuleName}} {
	}
	err := ctx.Bind(&req)
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{ setPrimaryKeyValue $Module "req" "id" }}
	done, err := h.Svc.Update{{$ModuleName}}(context.Background(), req)
	if !done {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{- if resultDefined .}}
	ctx.JSON(200, result.Ok(nil))
	{{- end}}
}

// @Summary Delete {{$Module.Name}} by Id
// @Description Delete {{$Module.Name}} by Id
// @Tags {{$Module.Name}}
// @Param id path string true "id"
// @Accept json
// @Produce json
{{- if resultDefined .}}
// @Success 200 {object} {{$ResultType}}
{{- else -}}
// @Success 200
{{- end}}
// @Failure 400 {string} string "param error"
// @Failure 404 {string} string "id not exists"
// @Router /{{ firstLower $Module.Name }}s/{id} [delete]
func (h *{{$ModuleName}}Handler) delete(ctx *gin.Context) {
	id := ctx.Param("id")
	if id == "" {
	ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	req := {{$Module.Pkg}}.{{$ModuleName}} {
	}
	{{ setPrimaryKeyValue $Module "req" "id" }}
	ok, err := h.Svc.Delete{{$ModuleName}}(context.Background(), req)
	if !ok {
		ctx.AbortWithStatus(http.StatusNotFound)
		return
	}
	if err != nil {
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}
	{{- if resultDefined .}}
	ctx.JSON(200, result.Ok(nil))
	{{- end}}
}