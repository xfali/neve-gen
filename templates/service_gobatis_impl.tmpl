{{- $ModuleName := firstUpper .Value.Name -}}
package {{.Value.Pkg}}

import (
	"github.com/xfali/xlog"
	"github.com/xfali/gobatis"
	"github.com/xfali/pagehelper"
	"sync"
)

type {{$ModuleName}}ServicImpl struct {
	log  xlog.Logger
	SessMgr *gobatis.SessionManager
}

func New{{$ModuleName}}Service() *{{$ModuleName}}ServicImpl {
	return &{{$ModuleName}}ServicImpl{
		log: xlog.GetLogger(),
	}
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}(request {{$ModuleName}}) (*{{$ModuleName}}, error) {
    panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}List(request {{$ModuleName}}, offset int, limit int) ([]{{$ModuleName}}, error) {
    panic("Not Implemented. ")
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}Batch(requests ...{{$ModuleName}}) error {
    s.lock.Lock()
    defer s.lock.Unlock()
    for _, req := range requests {
        s.db[req.{{selectModuleKey .Value | firstUpper}}] = req
    }
    return nil
}

func (s *{{$ModuleName}}ServicImpl) Update{{$ModuleName}}(request {{$ModuleName}}) (bool, error) {
    s.lock.Lock()
    defer s.lock.Unlock()
    _, ok := s.db[request.{{selectModuleKey .Value| firstUpper}}]
    if ok {
        s.db[request.{{selectModuleKey .Value| firstUpper}}] = request
    }
    return false, nil
}

func (s *{{$ModuleName}}ServicImpl) Delete{{$ModuleName}}(request {{$ModuleName}}) (bool, error) {
   s.lock.Lock()
   defer s.lock.Unlock()
   _, ok := s.db[request.{{selectModuleKey .Value| firstUpper}}]
   if ok {
       delete(s.db, request.{{selectModuleKey .Value| firstUpper}})
   }
   return false, nil
}