{{- $ModuleName := firstUpper .Value.Name -}}
package {{.Value.Pkg}}

import (
    "context"
	"github.com/xfali/gobatis"
	"github.com/xfali/pagehelper"
	"github.com/xfali/xlog"
)

type {{$ModuleName}}ServicImpl struct {
	log     xlog.Logger
	SessMgr *gobatis.SessionManager
}

func New{{$ModuleName}}Service() *{{$ModuleName}}ServicImpl {
	return &{{$ModuleName}}ServicImpl{
		log: xlog.GetLogger(),
	}
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}(ctx context.Context, request {{$ModuleName}}) (*{{$ModuleName}}, error) {
    v, err := request.Select(s.SessMgr.NewSession().SetContext(ctx))
    if err != nil {
        return nil, err
    }
    if len(v) == 0 {
        return nil, nil
    }
    return &v[0], nil
}

func (s *{{$ModuleName}}ServicImpl) Query{{$ModuleName}}List(ctx context.Context, request {{$ModuleName}}, offset int, limit int) ([]{{$ModuleName}}, error) {
    sqlCtx := pagehelper.C(ctx).Page(offset, limit).Build()
    v, err := request.Select(s.SessMgr.NewSession().SetContext(sqlCtx))
    if err != nil {
        return nil, err
    }
    return v, nil
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}(ctx context.Context, request {{$ModuleName}}) (int64, error) {
    _, id, err := request.Insert(s.SessMgr.NewSession().SetContext(ctx))
    if err != nil {
        return -1, err
    }
    return id, nil
}

func (s *{{$ModuleName}}ServicImpl) Insert{{$ModuleName}}Batch(ctx context.Context, requests ...{{$ModuleName}}) error {
    _, _, err := InsertBatch{{$ModuleName}}(s.SessMgr.NewSession().SetContext(ctx), requests)
    return err
}

func (s *{{$ModuleName}}ServicImpl) Update{{$ModuleName}}(ctx context.Context, request {{$ModuleName}}) (bool, error) {
    c, err := request.Update(s.SessMgr.NewSession().SetContext(ctx))
    if err != nil {
        return false, err
    }
    return c > 0, nil
}

func (s *{{$ModuleName}}ServicImpl) Delete{{$ModuleName}}(ctx context.Context, request {{$ModuleName}}) (bool, error) {
    c, err := request.Delete(s.SessMgr.NewSession().SetContext(ctx))
    if err != nil {
        return false, err
    }
    return c > 0, nil
}