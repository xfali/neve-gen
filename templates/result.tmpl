{{- $Data := . -}}
{{- $ResultName :=  firstUpper .Value.App.Result.Name -}}
{{- $Payload := resultInfo .Value.App.Result "payload" -}}
{{- $Pagination := resultInfo .Value.App.Result "pagination" -}}
package {{.Value.App.Result.Pkg}}

type {{firstUpper $Pagination.Name}} struct {
	Page     int64 `{{withTag $Data "Page" ""}}`
	PageSize int64 `{{withTag $Data "PageSize" ""}}`
	Total    int64 `{{withTag $Data "Total" ""}}`
}

type {{$ResultName}}Base struct {
	{{- range .Value.App.Result.Infos }}
	{{- if not .Key }}
	{{- if .Comment}}
	// {{.Comment}}
	{{- end}}
    {{ firstUpper .Name }} {{ .DataType }} `{{if .Tag}}{{withTag $Data .Name .Tag}}{{else}}{{withTag $Data .Name ""}}{{end}}`
    {{- end}}
	{{- end}}
}

// With payload
type {{$ResultName}} struct {
	{{$ResultName}}Base

	{{- if $Payload.Comment}}
	// {{$Payload.Comment}}
	{{- end}}
    {{ firstUpper $Payload.Name }} {{ $Payload.DataType }} `{{if $Payload.Tag}}{{withTag $Data $Payload.Name $Payload.Tag}}{{else}}{{withTag $Data $Payload.Name ""}}{{end}}`
}

// With pagination
type {{$ResultName}}Page struct {
	{{$ResultName}}

	{{- if $Pagination.Comment}}
	// {{$Pagination.Comment}}
	{{- end}}
	{{ firstUpper $Pagination.Name }} {{ $Pagination.DataType }} `{{if $Pagination.Tag}}{{withTag $Data $Pagination.Name $Pagination.Tag}}{{else}}{{withTag $Data $Pagination.Name ""}}{{end}}`
}

func Ok(data interface{}) *{{$ResultName}} {
	r := &{{$ResultName}}{}
	r.Ok(data)
	return r
}

func Page(data interface{}, pagination {{firstUpper $Pagination.Name}}) *{{$ResultName}}Page {
	r := &{{$ResultName}}Page{}
	r.Page(data, pagination)
	return r
}

func (r *{{$ResultName}}) Ok(data interface{}) *{{$ResultName}} {
	r.{{resultPayloadName .Value.App.Result | firstUpper}} = data
	return r
}

func (r *{{$ResultName}}Page) Page(data interface{}, pagination {{firstUpper $Pagination.Name}}) *{{$ResultName}}Page {
	r.{{resultPayloadName .Value.App.Result | firstUpper}} = data
	r.{{setResultPagination .Value.App.Result "pagination"}}
	return r
}


