{{- $ResultName :=  firstUpper .Value.App.Result.Name -}}
package {{.Value.App.Result.Pkg}}

type Pagination struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
	Total    int64 `json:"total"`
}

type {{$ResultName}}Base struct {
	{{- range .Value.App.Result.Infos }}
	{{- if not .Key }}
	{{- if .Comment}}
	// {{.Comment}}
	{{- end}}
    {{ firstUpper .Name }} {{ .DataType }} {{if .Tag}}`{{.Tag}}`{{end}}
    {{- end}}
	{{- end}}
}

// With payload and pagination
type {{$ResultName}} struct {
	{{$ResultName}}Base

	{{- range .Value.App.Result.Infos }}
	{{- if .Key }}
	{{- if .Comment}}
	// {{.Comment}}
	{{- end}}
    {{ firstUpper .Name }} {{ .DataType }} {{if .Tag}}`{{.Tag}}`{{end}}
    {{- end}}
	{{- end}}
}

func Ok(data interface{}) *{{$ResultName}} {
	r := &{{$ResultName}}{}
	r.Ok(data)
	return r
}

func Page(data interface{}, pagination Pagination) *{{$ResultName}} {
	r := &{{$ResultName}}{}
	r.Page(data, pagination)
	return r
}

func (r *{{$ResultName}}) Ok(data interface{}) *{{$ResultName}} {
	r.{{resultPayloadName .Value.App.Result | firstUpper}} = data
	return r
}

func (r *{{$ResultName}}) Page(data interface{}, pagination Pagination) *{{$ResultName}} {
	r.{{resultPayloadName .Value.App.Result | firstUpper}} = data
	r.{{setResultPagination .Value.App.Result "pagination"}}
	return r
}


